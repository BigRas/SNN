{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from numpy import *\n",
    "import numpy as np\n",
    "import random\n",
    "from matplotlib import pyplot as plt\n",
    "import math\n",
    "import pandas as pd\n",
    "import cv2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Parameters values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "C = 0.000001 # Capacitance 1.0 micro farad\n",
    "ur = -0.00065  # Resting potential -65 mV\n",
    "T = 0.7 #  Encoding period 700 ms\n",
    "tau = 0.01  #Time constant 10 ms\n",
    "uth = -0.00055;  #Reference spiking threshold -55 mV\n",
    "dt = 0.001;\n",
    "yl = ym = 1;\n",
    "bs = bl = bm  =  1;\n",
    "V = 0;\n",
    "da= 0 #dark adaptation\n",
    "cr = 1 #Colour response rebalancing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "time  = arange(0, T+dt, dt)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## dataSet import "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset = pd.read_csv('C:/Users/Rasoul/Desktop/sRGB.csv')\n",
    "x= dataset.iloc[:,-6:-3].values\n",
    "def sum(x):\n",
    "    return x[0] + x[1]\n",
    "y = np.apply_along_axis(sum, axis=1, arr=x) #equ 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Encoding"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The maximum possible stimulus "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "maxB =(np.amax((x[:,2]))) # equ 18 constant\n",
    "maxG =(np.amax((x[:,1])))\n",
    "maxR =(np.amax((x[:,0])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0 1.0 1.0\n"
     ]
    }
   ],
   "source": [
    "print(maxB,maxG,maxR)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Colour visual perception"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "Pb = [[0 for x in range(len(x[0]))] for y in range(len(x))]  # equ 1\n",
    "for i in range(len(x)):\n",
    "    for j,p in enumerate(x[i]):\n",
    "        Pb[i][j] = cr*math.log(p,e) + da"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    }
   ],
   "source": [
    "print(len(Pb[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(len(Pb)):\n",
    "    for j in range(len(Pb[0])):\n",
    "        Pb[i][j]= (T*Pb[i][j])/maxR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.1887978309913812\n"
     ]
    }
   ],
   "source": [
    "print(Pb[0][1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Encoding euq 18"
   ]
  },